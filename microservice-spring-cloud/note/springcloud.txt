官网https://projects.spring.io/spring-cloud/的右边，有springcloud各个版本及Reference(文档)
注意：由于配置采用yml，而yml文件对空格有严格要求，所以需要添加插件来降低操作难度，并且插件提供快速创建springboot项目的支持。spring-tool-suite
安装教程：
插件官网：https://spring.io/tools/sts/all
1) 查看eclipse的版本，点击help->about eclipse 然后看version栏。
2) 根据eclipse的版本，选择对应spring-tool-suite的版本，比如4.6的，在官网的Update sites下有对应的地址：	http://dist.springsource.com/release/TOOLS/update/e4.6/
3) 点击eclipse的help->install new software->add->name随便输入，而location填入上一步的地址，然后ok。
4) 然后勾选Show only the latest version of available software、Group items by category。然后将Contact all update sites during install to find required software的勾去掉。
5) 在刷出来的插件列表中，勾选Core/Spring IDE、Extensions/Spring IDE、Integrations/Spring IDE、Resources/Spring IDE，然后next即可。
一、生产者、消费者(最简单例子，实际开发不采用)
使用https://start.spring.io/或者安装spring-suite-tool插件。然后创建spring-boot项目。
项目一：生产者 microservice-provider-user
依赖：Web、jpa、mysql
1)创建实体类User对象，然后使用jpa技术，创建对应表。
@Entity
public class User {

	@Id
	@GeneratedValue
	private Long id;
	private String username;
	private String name;
	private Short age;
	private BigDecimal balance;
}
2)创建持久化接口
@Repository
public interface UserRepository extends JpaRepository<User, Long>{

}
3)创建Controller
@RestController
public class UserController {

	@Autowired
	private UserRepository userRepository;
	
	@GetMapping("/getUserById/{id}")
	public User getUserById(@PathVariable Long id){
		return userRepository.findOne(id);
	}
}
4)配置application.yml文件
server:
  port: 7900
  
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/spring_cloud1
    username: root
    password: 123
    driver-class-name: com.mysql.jdbc.Driver
  jpa:
    database: mysql
    show-sql: true
    hibernate:
      ddl-auto: update
  application:
    name: microservice-provider-user

效果：可以通过localhost:7900/getUserById/1 访问到数据库数据
项目二：消费者 microservice-consumer-movie
依赖：Web
1)创建Controller
@RestController
public class MovieController {

	@Autowired
	private RestTemplate restTemplate;
	
	@GetMapping("/movie/{id}")
	public User movie(@PathVariable Long id){
		return restTemplate.getForObject("http://localhost:7900/getUserById/"+id, User.class);
	}
	
}
2)复制项目一的User实体类，然后将注解删除。
3)在springboot程序入口类(即有main方法那个类)中加入：
	@Bean
	public RestTemplate restTemplate(){
		return new RestTemplate();
	}
4)配置application.yml文件
server:
  port: 7901
效果：可以通过localhost:7901/movie/1 访问到项目一的接口
  
  
二、服务发现注册组件eureka
项目三：microservice-discovery-eureka
1.eureka server
默认地址：http://localhost:8761/
依赖：eureka
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-eureka-server</artifactId>
</dependency>

1)在springboot程序入口类上，加入@EnableEurekaServer注解。

2)配置application.yml文件
server:
  port: 8761
eureka:
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://localhost:8761/eureka

效果：运行eureka项目后，访问http://localhost:8761/可以看到eureka控制台。

2.eureka client和注册微服务到eureka service
修改 项目一：生产者 microservice-provider-user
依赖：
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-eureka</artifactId>	
</dependency>

1)修改application.yml文件，加入以下内容：
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}
2)在springboot入口类上加入@EnableEurekaClient注解。

效果：启动项目后，在eureka的控制台Application中可以发现服务。

3)设置eureka的登录密码
3.1) 依赖：
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>
3.2) yml配置文件
security:
  basic:
    enabled: true
  user:
    name: admin
    password: zj123
并将service-url改为：
 service-url:
      defaultZone: http://admin:zj123@localhost:8761/eureka

4) 健康检查
依赖：
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
yum配置：
eureka:
  client:
    healthcheck:
      enabled: true

	  
三、Ribbon 提供负载均衡的能力，在客户端实现，与eureka联系，通过负载均衡算法，使客户端均衡地命中的节点。
【案例】
1) 依赖：
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-ribbon</artifactId>
</dependency>
注意：如果是在eureka的基础下，使用ribbon，那就不需要加入依赖，因为spring-cloud-starter-eureka自带了ribbon的依赖。

2)在项目microservice-consumer-movie基础上修改，则在springboot的入口类中，在生成RestTemplate该Bean的方法上面添加@LoadBalanced，此时，该RestTemplate对象就具备了ribbon负载均衡的能力。

注意：此配置，则要使用virtual ip的方式，即serviceid，也就是另外一个微服务yml中spring.application.name的值。


【ribbon有三种配置】
一种是默认的，一种是通过@RibbonClient指向一个类的配置方式，一种是通过配置文件(yml或者properties)
他们的优先级：默认<类配置<配置文件

1）默认：省略。
2）类配置文件：demo中有案例，不过不是很好的demo。
3）配置文件方式：
ribbon支持一下配置：
*NFLoadBalancerClassName:should implement ILoadBalancer
*NFLoadBalancerRuleClassName:should implement IRule
*NFLoadBalancerPingClassName:should implement IPing
*NIWSServerListClassName:should implement ServerList
*NIWSServerListFilterClassName:should implement ServerListFilter

例：
application.yml
microservice-provider-user:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule
则ribbon会对microservice-provider-user这个微服务使用WeightedResponseTimeRule策略。
其他不影响。

【ribbon脱离eureka使用】
1）classpath没有eureka
2）存在eureka，禁止使用eureka
#禁用eureka
ribbon:
  eureka:
   enabled: false
#配置serviceid为microservice-provider-user使用服务列表中的地址
microservice-provider-user:
  ribbon:
    listOfServers: localhost:7900   

四、Feign  [fe?n]
一个声明式的REST客户端，它让写一个web服务变得容易。创建一个接口并添加注解就可以开始使用Feign了。它提供可插拔的Feign注解和JAX-RS注解，并且提供可插拔的编码工具和解码工具。SpringCloud为Feign添加SpringMVC的注解以便使用同样的Http转化器。它还整合了Ribbon和Eureka来提供负载均衡。
 
坑：
@GetMapping不支持 @PathVariable加上括号，还有参数。@PathVariable("id")

